/*
 * generated by Xtext 2.33.0
 */
package dk.sdu.mmmi.mdsd.serializer;

import com.google.inject.Inject;
import dk.sdu.mmmi.mdsd.math.Add;
import dk.sdu.mmmi.mdsd.math.Constant;
import dk.sdu.mmmi.mdsd.math.Div;
import dk.sdu.mmmi.mdsd.math.Exp;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.MathPackage;
import dk.sdu.mmmi.mdsd.math.Mul;
import dk.sdu.mmmi.mdsd.math.Parenthesis;
import dk.sdu.mmmi.mdsd.math.Sub;
import dk.sdu.mmmi.mdsd.math.VariableBinding;
import dk.sdu.mmmi.mdsd.math.VariableUse;
import dk.sdu.mmmi.mdsd.services.MathGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MathSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MathGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MathPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MathPackage.ADD:
				sequence_SumDiff(context, (Add) semanticObject); 
				return; 
			case MathPackage.CONSTANT:
				sequence_Constant(context, (Constant) semanticObject); 
				return; 
			case MathPackage.DIV:
				sequence_ProdQuot(context, (Div) semanticObject); 
				return; 
			case MathPackage.EXP:
				sequence_Exp(context, (Exp) semanticObject); 
				return; 
			case MathPackage.MATH_EXP:
				sequence_MathExp(context, (MathExp) semanticObject); 
				return; 
			case MathPackage.MUL:
				sequence_ProdQuot(context, (Mul) semanticObject); 
				return; 
			case MathPackage.PARENTHESIS:
				sequence_Parenthesis(context, (Parenthesis) semanticObject); 
				return; 
			case MathPackage.SUB:
				sequence_SumDiff(context, (Sub) semanticObject); 
				return; 
			case MathPackage.VARIABLE_BINDING:
				sequence_VariableBinding(context, (VariableBinding) semanticObject); 
				return; 
			case MathPackage.VARIABLE_USE:
				sequence_VariableUse(context, (VariableUse) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     SumDiff returns Constant
	 *     SumDiff.Add_1_0_0_1 returns Constant
	 *     SumDiff.Sub_1_0_1_1 returns Constant
	 *     ProdQuot returns Constant
	 *     ProdQuot.Mul_1_0_0_1 returns Constant
	 *     ProdQuot.Div_1_0_1_1 returns Constant
	 *     Primary returns Constant
	 *     Constant returns Constant
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_Constant(ISerializationContext context, Constant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstantAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns Exp
	 *
	 * Constraint:
	 *     (name=ID exp=SumDiff)
	 * </pre>
	 */
	protected void sequence_Exp(ISerializationContext context, Exp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.EXP__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.EXP__NAME));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.EXP__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.EXP__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getExpAccess().getExpSumDiffParserRuleCall_3_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MathExp returns MathExp
	 *
	 * Constraint:
	 *     exps+=Exp+
	 * </pre>
	 */
	protected void sequence_MathExp(ISerializationContext context, MathExp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SumDiff returns Parenthesis
	 *     SumDiff.Add_1_0_0_1 returns Parenthesis
	 *     SumDiff.Sub_1_0_1_1 returns Parenthesis
	 *     ProdQuot returns Parenthesis
	 *     ProdQuot.Mul_1_0_0_1 returns Parenthesis
	 *     ProdQuot.Div_1_0_1_1 returns Parenthesis
	 *     Primary returns Parenthesis
	 *     Parenthesis returns Parenthesis
	 *
	 * Constraint:
	 *     exp=SumDiff
	 * </pre>
	 */
	protected void sequence_Parenthesis(ISerializationContext context, Parenthesis semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.PARENTHESIS__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.PARENTHESIS__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParenthesisAccess().getExpSumDiffParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SumDiff returns Div
	 *     SumDiff.Add_1_0_0_1 returns Div
	 *     SumDiff.Sub_1_0_1_1 returns Div
	 *     ProdQuot returns Div
	 *     ProdQuot.Mul_1_0_0_1 returns Div
	 *     ProdQuot.Div_1_0_1_1 returns Div
	 *
	 * Constraint:
	 *     (left=ProdQuot_Div_1_0_1_1 right=Primary)
	 * </pre>
	 */
	protected void sequence_ProdQuot(ISerializationContext context, Div semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.DIV__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.DIV__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.DIV__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.DIV__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProdQuotAccess().getDivLeftAction_1_0_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getProdQuotAccess().getRightPrimaryParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SumDiff returns Mul
	 *     SumDiff.Add_1_0_0_1 returns Mul
	 *     SumDiff.Sub_1_0_1_1 returns Mul
	 *     ProdQuot returns Mul
	 *     ProdQuot.Mul_1_0_0_1 returns Mul
	 *     ProdQuot.Div_1_0_1_1 returns Mul
	 *
	 * Constraint:
	 *     (left=ProdQuot_Mul_1_0_0_1 right=Primary)
	 * </pre>
	 */
	protected void sequence_ProdQuot(ISerializationContext context, Mul semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.MUL__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.MUL__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.MUL__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.MUL__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProdQuotAccess().getMulLeftAction_1_0_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getProdQuotAccess().getRightPrimaryParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SumDiff returns Add
	 *     SumDiff.Add_1_0_0_1 returns Add
	 *     SumDiff.Sub_1_0_1_1 returns Add
	 *
	 * Constraint:
	 *     (left=SumDiff_Add_1_0_0_1 right=ProdQuot)
	 * </pre>
	 */
	protected void sequence_SumDiff(ISerializationContext context, Add semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.ADD__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.ADD__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.ADD__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.ADD__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSumDiffAccess().getAddLeftAction_1_0_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSumDiffAccess().getRightProdQuotParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SumDiff returns Sub
	 *     SumDiff.Add_1_0_0_1 returns Sub
	 *     SumDiff.Sub_1_0_1_1 returns Sub
	 *
	 * Constraint:
	 *     (left=SumDiff_Sub_1_0_1_1 right=ProdQuot)
	 * </pre>
	 */
	protected void sequence_SumDiff(ISerializationContext context, Sub semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.SUB__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.SUB__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.SUB__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.SUB__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSumDiffAccess().getSubLeftAction_1_0_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSumDiffAccess().getRightProdQuotParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SumDiff returns VariableBinding
	 *     SumDiff.Add_1_0_0_1 returns VariableBinding
	 *     SumDiff.Sub_1_0_1_1 returns VariableBinding
	 *     ProdQuot returns VariableBinding
	 *     ProdQuot.Mul_1_0_0_1 returns VariableBinding
	 *     ProdQuot.Div_1_0_1_1 returns VariableBinding
	 *     Primary returns VariableBinding
	 *     VariableBinding returns VariableBinding
	 *
	 * Constraint:
	 *     (id=ID binding=SumDiff body=SumDiff)
	 * </pre>
	 */
	protected void sequence_VariableBinding(ISerializationContext context, VariableBinding semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.VARIABLE_BINDING__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.VARIABLE_BINDING__ID));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.VARIABLE_BINDING__BINDING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.VARIABLE_BINDING__BINDING));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.VARIABLE_BINDING__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.VARIABLE_BINDING__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableBindingAccess().getIdIDTerminalRuleCall_2_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getVariableBindingAccess().getBindingSumDiffParserRuleCall_4_0(), semanticObject.getBinding());
		feeder.accept(grammarAccess.getVariableBindingAccess().getBodySumDiffParserRuleCall_6_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SumDiff returns VariableUse
	 *     SumDiff.Add_1_0_0_1 returns VariableUse
	 *     SumDiff.Sub_1_0_1_1 returns VariableUse
	 *     ProdQuot returns VariableUse
	 *     ProdQuot.Mul_1_0_0_1 returns VariableUse
	 *     ProdQuot.Div_1_0_1_1 returns VariableUse
	 *     Primary returns VariableUse
	 *     VariableUse returns VariableUse
	 *
	 * Constraint:
	 *     ref=ID
	 * </pre>
	 */
	protected void sequence_VariableUse(ISerializationContext context, VariableUse semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.VARIABLE_USE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.VARIABLE_USE__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableUseAccess().getRefIDTerminalRuleCall_1_0(), semanticObject.getRef());
		feeder.finish();
	}
	
	
}
