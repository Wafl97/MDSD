/*
 * generated by Xtext 2.33.0
 */
package dk.sdu.mmmi.mdsd.ex.scoping

import java.util.List
import java.util.ArrayList
import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import dk.sdu.mmmi.mdsd.ex.setLang.SetLangPackage
import dk.sdu.mmmi.mdsd.ex.setLang.Member
import dk.sdu.mmmi.mdsd.ex.setLang.Record
import dk.sdu.mmmi.mdsd.ex.setLang.RecordAccess
import dk.sdu.mmmi.mdsd.ex.setLang.Ref
import dk.sdu.mmmi.mdsd.ex.setLang.Binding

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class SetLangScopeProvider extends AbstractSetLangScopeProvider {
	
	override IScope getScope(EObject context, EReference reference) {
	    if (context instanceof RecordAccess 
	    	&& reference == SetLangPackage.Literals.RECORD_ACCESS__MEMBER
	    	) {
	        val candidates = (context as RecordAccess).record.getAllValidMembers;	        
	        return Scopes.scopeFor(candidates);
	    }
	    else if (context instanceof Ref) {
	    	val record = (context as Ref).getParentRecord;
	        val candidates = record.getAllValidBindings;
         	return Scopes.scopeFor(candidates);
	    }
        return super.getScope(context, reference);
	}
	
	def Record getParentRecord(Ref ref) {
		var parent = ref.eContainer
		while(parent !== null) {
			parent = parent.eContainer
			if (parent instanceof Record) {
				return parent as Record
			}
		}
	}
	
	def List<Binding> getAllValidBindings(Record record) {
		val bindings = new ArrayList<Binding>();
		bindings.addAll(record.getAllValidMembers)
		bindings.addAll(record.parameters)
		bindings;
	}
	
	def List<Member> getAllValidMembers(Record record) {
		val members = new ArrayList();
		record.getParentMembers(members);
		members.addAll(record.members);
		members;
	}
	
	def void getParentMembers(Record record, List<Member> members) {
		if (record.parent !== null) {
			record.parent.getParentMembers(members);
			members.addAll(record.parent.members);
		}
	}
}
