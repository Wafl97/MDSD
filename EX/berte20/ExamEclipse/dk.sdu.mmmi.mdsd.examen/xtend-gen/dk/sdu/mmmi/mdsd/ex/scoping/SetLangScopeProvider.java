/**
 * generated by Xtext 2.33.0
 */
package dk.sdu.mmmi.mdsd.ex.scoping;

import com.google.common.base.Objects;
import dk.sdu.mmmi.mdsd.ex.setLang.Binding;
import dk.sdu.mmmi.mdsd.ex.setLang.Member;
import dk.sdu.mmmi.mdsd.ex.setLang.Record;
import dk.sdu.mmmi.mdsd.ex.setLang.RecordAccess;
import dk.sdu.mmmi.mdsd.ex.setLang.Ref;
import dk.sdu.mmmi.mdsd.ex.setLang.SetLangPackage;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class SetLangScopeProvider extends AbstractSetLangScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if (((context instanceof RecordAccess) && Objects.equal(reference, SetLangPackage.Literals.RECORD_ACCESS__MEMBER))) {
      final List<Member> candidates = this.getAllValidMembers(((RecordAccess) context).getRecord());
      return Scopes.scopeFor(candidates);
    } else {
      if ((context instanceof Ref)) {
        final Record record = this.getParentRecord(((Ref) context));
        final List<Binding> candidates_1 = this.getAllValidBindings(record);
        return Scopes.scopeFor(candidates_1);
      }
    }
    return super.getScope(context, reference);
  }

  public Record getParentRecord(final Ref ref) {
    EObject parent = ref.eContainer();
    while ((parent != null)) {
      {
        parent = parent.eContainer();
        if ((parent instanceof Record)) {
          return ((Record) parent);
        }
      }
    }
    return null;
  }

  public List<Binding> getAllValidBindings(final Record record) {
    ArrayList<Binding> _xblockexpression = null;
    {
      final ArrayList<Binding> bindings = new ArrayList<Binding>();
      bindings.addAll(this.getAllValidMembers(record));
      bindings.addAll(record.getParameters());
      _xblockexpression = bindings;
    }
    return _xblockexpression;
  }

  public List<Member> getAllValidMembers(final Record record) {
    ArrayList<Member> _xblockexpression = null;
    {
      final ArrayList<Member> members = new ArrayList<Member>();
      this.getParentMembers(record, members);
      members.addAll(record.getMembers());
      _xblockexpression = members;
    }
    return _xblockexpression;
  }

  public void getParentMembers(final Record record, final List<Member> members) {
    Record _parent = record.getParent();
    boolean _tripleNotEquals = (_parent != null);
    if (_tripleNotEquals) {
      this.getParentMembers(record.getParent(), members);
      members.addAll(record.getParent().getMembers());
    }
  }
}
