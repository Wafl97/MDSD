/**
 * generated by Xtext 2.33.0
 */
package dk.sdu.mmmi.mdsd.ex.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.ex.setLang.Compute;
import dk.sdu.mmmi.mdsd.ex.setLang.Expression;
import dk.sdu.mmmi.mdsd.ex.setLang.ExternalDef;
import dk.sdu.mmmi.mdsd.ex.setLang.Filter;
import dk.sdu.mmmi.mdsd.ex.setLang.IntValue;
import dk.sdu.mmmi.mdsd.ex.setLang.Intersection;
import dk.sdu.mmmi.mdsd.ex.setLang.Member;
import dk.sdu.mmmi.mdsd.ex.setLang.Parameter;
import dk.sdu.mmmi.mdsd.ex.setLang.Parenthesis;
import dk.sdu.mmmi.mdsd.ex.setLang.Product;
import dk.sdu.mmmi.mdsd.ex.setLang.Program;
import dk.sdu.mmmi.mdsd.ex.setLang.Projection;
import dk.sdu.mmmi.mdsd.ex.setLang.Record;
import dk.sdu.mmmi.mdsd.ex.setLang.RecordAccess;
import dk.sdu.mmmi.mdsd.ex.setLang.Ref;
import dk.sdu.mmmi.mdsd.ex.setLang.Set;
import dk.sdu.mmmi.mdsd.ex.setLang.Tuple;
import dk.sdu.mmmi.mdsd.ex.setLang.Union;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SetLangGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Program program = Iterators.<Program>filter(resource.getAllContents(), Program.class).next();
    String _name = program.getName();
    String _plus = ("setdsl/" + _name);
    String _plus_1 = (_plus + ".java");
    fsa.generateFile(_plus_1, this.generateCode(program));
  }

  public CharSequence generateCode(final Program program) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/* generated by SetLang parser */");
    _builder.newLine();
    _builder.newLine();
    _builder.append("package setdsl;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Set;");
    _builder.newLine();
    _builder.append("import utils.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = program.getName();
    _builder.append(_name);
    _builder.append(" extends AbstractRecordProgram {");
    _builder.newLineIfNotEmpty();
    {
      if (((program.getExternalDefs() != null) && (program.getExternalDefs().size() > 0))) {
        _builder.append("\t");
        CharSequence _generateConstructor = this.generateConstructor(program);
        _builder.append(_generateConstructor, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    CharSequence _generateComputes = this.generateComputes(program.getComputes());
    _builder.append(_generateComputes, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _generateRecords = this.generateRecords(program.getRecords());
    _builder.append(_generateRecords, "\t");
    _builder.newLineIfNotEmpty();
    {
      if (((program.getExternalDefs() != null) && (program.getExternalDefs().size() > 0))) {
        _builder.append("\t");
        CharSequence _generateExternalDefs = this.generateExternalDefs(program.getExternalDefs());
        _builder.append(_generateExternalDefs, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateConstructor(final Program program) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("private External external;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public ");
    String _name = program.getName();
    _builder.append(_name);
    _builder.append("(External external) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("this.external = external;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateExternalDefs(final EList<ExternalDef> externalDefs) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("public interface External {");
    _builder.newLine();
    {
      for(final ExternalDef e : externalDefs) {
        _builder.append("\t");
        _builder.append("public boolean ");
        String _name = e.getName();
        _builder.append(_name, "\t");
        _builder.append("(");
        CharSequence _java = this.toJava(e.getType());
        _builder.append(_java, "\t");
        _builder.append(" a);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateComputes(final EList<Compute> computes) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("public List compute() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List results = new ArrayList();");
    _builder.newLine();
    {
      for(final Compute compute : computes) {
        _builder.append("\t");
        _builder.append("results.add(");
        CharSequence _generateExp = this.generateExp(compute.getExp());
        _builder.append(_generateExp, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("return results;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateRecords(final EList<Record> records) {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final Record p : records) {
        CharSequence _generateRecord = this.generateRecord(p);
        _builder.append(_generateRecord);
      }
    }
    return _builder;
  }

  public CharSequence generateRecord(final Record record) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("public class ");
    String _name = record.getName();
    _builder.append(_name);
    {
      Record _parent = record.getParent();
      boolean _tripleNotEquals = (_parent != null);
      if (_tripleNotEquals) {
        _builder.append(" extends ");
        String _name_1 = record.getParent().getName();
        _builder.append(_name_1);
      }
    }
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<Parameter> _parameters = record.getParameters();
      for(final Parameter p : _parameters) {
        _builder.append("\t");
        _builder.append("private ");
        CharSequence _java = this.toJava(p.getType());
        _builder.append(_java, "\t");
        _builder.append(" ");
        String _name_2 = p.getName();
        _builder.append(_name_2, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Member> _members = record.getMembers();
      for(final Member m : _members) {
        _builder.append("\t");
        _builder.append("public Set ");
        String _name_3 = m.getName();
        _builder.append(_name_3, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_4 = record.getName();
    _builder.append(_name_4, "\t");
    _builder.append("(");
    {
      List<Parameter> _ownAndLineageParameters = this.getOwnAndLineageParameters(record);
      boolean _hasElements = false;
      for(final Parameter p_1 : _ownAndLineageParameters) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "\t");
        }
        CharSequence _java_1 = this.toJava(p_1.getType());
        _builder.append(_java_1, "\t");
        _builder.append(" ");
        String _name_5 = p_1.getName();
        _builder.append(_name_5, "\t");
      }
    }
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    {
      Record _parent_1 = record.getParent();
      boolean _tripleNotEquals_1 = (_parent_1 != null);
      if (_tripleNotEquals_1) {
        _builder.append("\t\t");
        _builder.append("super(");
        {
          List<Parameter> _lineageParameters = this.getLineageParameters(record);
          boolean _hasElements_1 = false;
          for(final Parameter p_2 : _lineageParameters) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(", ", "\t\t");
            }
            String _name_6 = p_2.getName();
            _builder.append(_name_6, "\t\t");
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Parameter> _parameters_1 = record.getParameters();
      for(final Parameter p_3 : _parameters_1) {
        _builder.append("\t\t");
        _builder.append("this.");
        String _name_7 = p_3.getName();
        _builder.append(_name_7, "\t\t");
        _builder.append(" = ");
        String _name_8 = p_3.getName();
        _builder.append(_name_8, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Member> _members_1 = record.getMembers();
      for(final Member m_1 : _members_1) {
        _builder.append("\t\t");
        _builder.append("this.");
        String _name_9 = m_1.getName();
        _builder.append(_name_9, "\t\t");
        _builder.append(" = ");
        CharSequence _generateExp = this.generateExp(m_1.getExp());
        _builder.append(_generateExp, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public List<Parameter> getOwnAndLineageParameters(final Record record) {
    ArrayList<Parameter> _xblockexpression = null;
    {
      final ArrayList<Parameter> lineage = new ArrayList<Parameter>();
      lineage.addAll(this.getLineageParameters(record));
      lineage.addAll(record.getParameters());
      _xblockexpression = lineage;
    }
    return _xblockexpression;
  }

  public List<Parameter> getLineageParameters(final Record record) {
    ArrayList<Parameter> _xblockexpression = null;
    {
      final ArrayList<Parameter> lineage = new ArrayList<Parameter>();
      Record _parent = record.getParent();
      boolean _tripleNotEquals = (_parent != null);
      if (_tripleNotEquals) {
        this.getParentParameters(record.getParent(), lineage);
      }
      _xblockexpression = lineage;
    }
    return _xblockexpression;
  }

  public void getParentParameters(final Record record, final List<Parameter> parameters) {
    Record _parent = record.getParent();
    boolean _tripleNotEquals = (_parent != null);
    if (_tripleNotEquals) {
      this.getParentParameters(record.getParent(), parameters);
    }
    parameters.addAll(record.getParameters());
  }

  public CharSequence toJava(final String type) {
    String _xblockexpression = null;
    {
      boolean _equals = Objects.equal(type, "Int");
      if (_equals) {
        return "int";
      } else {
        boolean _startsWith = type.startsWith("Set");
        if (_startsWith) {
          return "Set";
        }
      }
      _xblockexpression = type;
    }
    return _xblockexpression;
  }

  protected CharSequence _generateExp(final IntValue value) {
    StringConcatenation _builder = new StringConcatenation();
    int _value = value.getValue();
    _builder.append(_value);
    return _builder;
  }

  protected CharSequence _generateExp(final Set set) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Set.of(");
    {
      EList<Expression> _values = set.getValues();
      boolean _hasElements = false;
      for(final Expression v : _values) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _generateExp = this.generateExp(v);
        _builder.append(_generateExp);
      }
    }
    _builder.append(")");
    return _builder;
  }

  protected CharSequence _generateExp(final Tuple tuple) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Tuple.of(");
    {
      EList<Expression> _values = tuple.getValues();
      boolean _hasElements = false;
      for(final Expression v : _values) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _generateExp = this.generateExp(v);
        _builder.append(_generateExp);
      }
    }
    _builder.append(")");
    return _builder;
  }

  protected CharSequence _generateExp(final Product product) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("set_product(");
    CharSequence _generateExp = this.generateExp(product.getLeft());
    _builder.append(_generateExp);
    _builder.append(", ");
    CharSequence _generateExp_1 = this.generateExp(product.getRight());
    _builder.append(_generateExp_1);
    _builder.append(")");
    return _builder;
  }

  protected CharSequence _generateExp(final RecordAccess recordAccess) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("new ");
    String _name = recordAccess.getRecord().getName();
    _builder.append(_name);
    _builder.append("(");
    {
      EList<Expression> _parameters = recordAccess.getParameters();
      boolean _hasElements = false;
      for(final Expression p : _parameters) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        CharSequence _generateExp = this.generateExp(p);
        _builder.append(_generateExp);
      }
    }
    _builder.append(").");
    String _name_1 = recordAccess.getMember().getName();
    _builder.append(_name_1);
    return _builder;
  }

  protected CharSequence _generateExp(final Filter filter) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("set_filter(");
    CharSequence _generateExp = this.generateExp(filter.getOp());
    _builder.append(_generateExp);
    _builder.append(", external::");
    String _name = filter.getExternal().getName();
    _builder.append(_name);
    _builder.append(")");
    return _builder;
  }

  protected CharSequence _generateExp(final Projection projection) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("set_projection(");
    CharSequence _generateExp = this.generateExp(projection.getOp());
    _builder.append(_generateExp);
    _builder.append(", ");
    {
      EList<Integer> _indices = projection.getIndices();
      boolean _hasElements = false;
      for(final Integer i : _indices) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        _builder.append(i);
      }
    }
    _builder.append(")");
    return _builder;
  }

  protected CharSequence _generateExp(final Intersection intersection) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("set_intersection(");
    CharSequence _generateExp = this.generateExp(intersection.getLeft());
    _builder.append(_generateExp);
    _builder.append(", ");
    CharSequence _generateExp_1 = this.generateExp(intersection.getRight());
    _builder.append(_generateExp_1);
    _builder.append(")");
    return _builder;
  }

  protected CharSequence _generateExp(final Union union) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("set_union(");
    CharSequence _generateExp = this.generateExp(union.getLeft());
    _builder.append(_generateExp);
    _builder.append(", ");
    CharSequence _generateExp_1 = this.generateExp(union.getRight());
    _builder.append(_generateExp_1);
    _builder.append(")");
    return _builder;
  }

  protected CharSequence _generateExp(final Parenthesis parenthesis) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateExp = this.generateExp(parenthesis.getExp());
    _builder.append(_generateExp);
    return _builder;
  }

  protected CharSequence _generateExp(final Ref ref) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("this.");
    String _name = ref.getRef().getName();
    _builder.append(_name);
    return _builder;
  }

  public CharSequence generateExp(final Expression filter) {
    if (filter instanceof Filter) {
      return _generateExp((Filter)filter);
    } else if (filter instanceof IntValue) {
      return _generateExp((IntValue)filter);
    } else if (filter instanceof Intersection) {
      return _generateExp((Intersection)filter);
    } else if (filter instanceof Parenthesis) {
      return _generateExp((Parenthesis)filter);
    } else if (filter instanceof Product) {
      return _generateExp((Product)filter);
    } else if (filter instanceof Projection) {
      return _generateExp((Projection)filter);
    } else if (filter instanceof RecordAccess) {
      return _generateExp((RecordAccess)filter);
    } else if (filter instanceof Ref) {
      return _generateExp((Ref)filter);
    } else if (filter instanceof Set) {
      return _generateExp((Set)filter);
    } else if (filter instanceof Tuple) {
      return _generateExp((Tuple)filter);
    } else if (filter instanceof Union) {
      return _generateExp((Union)filter);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(filter).toString());
    }
  }
}
