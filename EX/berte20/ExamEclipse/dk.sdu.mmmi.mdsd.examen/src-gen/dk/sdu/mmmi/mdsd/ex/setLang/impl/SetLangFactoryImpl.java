/**
 * generated by Xtext 2.33.0
 */
package dk.sdu.mmmi.mdsd.ex.setLang.impl;

import dk.sdu.mmmi.mdsd.ex.setLang.Binding;
import dk.sdu.mmmi.mdsd.ex.setLang.Compute;
import dk.sdu.mmmi.mdsd.ex.setLang.Expression;
import dk.sdu.mmmi.mdsd.ex.setLang.ExternalDef;
import dk.sdu.mmmi.mdsd.ex.setLang.Filter;
import dk.sdu.mmmi.mdsd.ex.setLang.IntValue;
import dk.sdu.mmmi.mdsd.ex.setLang.Intersection;
import dk.sdu.mmmi.mdsd.ex.setLang.Member;
import dk.sdu.mmmi.mdsd.ex.setLang.Parameter;
import dk.sdu.mmmi.mdsd.ex.setLang.Parenthesis;
import dk.sdu.mmmi.mdsd.ex.setLang.Product;
import dk.sdu.mmmi.mdsd.ex.setLang.Program;
import dk.sdu.mmmi.mdsd.ex.setLang.Projection;
import dk.sdu.mmmi.mdsd.ex.setLang.RecordAccess;
import dk.sdu.mmmi.mdsd.ex.setLang.Ref;
import dk.sdu.mmmi.mdsd.ex.setLang.Set;
import dk.sdu.mmmi.mdsd.ex.setLang.SetLangFactory;
import dk.sdu.mmmi.mdsd.ex.setLang.SetLangPackage;
import dk.sdu.mmmi.mdsd.ex.setLang.Tuple;
import dk.sdu.mmmi.mdsd.ex.setLang.Union;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SetLangFactoryImpl extends EFactoryImpl implements SetLangFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SetLangFactory init()
  {
    try
    {
      SetLangFactory theSetLangFactory = (SetLangFactory)EPackage.Registry.INSTANCE.getEFactory(SetLangPackage.eNS_URI);
      if (theSetLangFactory != null)
      {
        return theSetLangFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SetLangFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SetLangFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SetLangPackage.PROGRAM: return createProgram();
      case SetLangPackage.EXTERNAL_DEF: return createExternalDef();
      case SetLangPackage.RECORD: return createRecord();
      case SetLangPackage.PARAMETER: return createParameter();
      case SetLangPackage.MEMBER: return createMember();
      case SetLangPackage.COMPUTE: return createCompute();
      case SetLangPackage.EXPRESSION: return createExpression();
      case SetLangPackage.BINDING: return createBinding();
      case SetLangPackage.REF: return createRef();
      case SetLangPackage.UNION: return createUnion();
      case SetLangPackage.INTERSECTION: return createIntersection();
      case SetLangPackage.PRODUCT: return createProduct();
      case SetLangPackage.PROJECTION: return createProjection();
      case SetLangPackage.FILTER: return createFilter();
      case SetLangPackage.INT_VALUE: return createIntValue();
      case SetLangPackage.SET: return createSet();
      case SetLangPackage.TUPLE: return createTuple();
      case SetLangPackage.PARENTHESIS: return createParenthesis();
      case SetLangPackage.RECORD_ACCESS: return createRecordAccess();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExternalDef createExternalDef()
  {
    ExternalDefImpl externalDef = new ExternalDefImpl();
    return externalDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public dk.sdu.mmmi.mdsd.ex.setLang.Record createRecord()
  {
    RecordImpl record = new RecordImpl();
    return record;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Member createMember()
  {
    MemberImpl member = new MemberImpl();
    return member;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Compute createCompute()
  {
    ComputeImpl compute = new ComputeImpl();
    return compute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Binding createBinding()
  {
    BindingImpl binding = new BindingImpl();
    return binding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ref createRef()
  {
    RefImpl ref = new RefImpl();
    return ref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Union createUnion()
  {
    UnionImpl union = new UnionImpl();
    return union;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Intersection createIntersection()
  {
    IntersectionImpl intersection = new IntersectionImpl();
    return intersection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Product createProduct()
  {
    ProductImpl product = new ProductImpl();
    return product;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Projection createProjection()
  {
    ProjectionImpl projection = new ProjectionImpl();
    return projection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Filter createFilter()
  {
    FilterImpl filter = new FilterImpl();
    return filter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntValue createIntValue()
  {
    IntValueImpl intValue = new IntValueImpl();
    return intValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Set createSet()
  {
    SetImpl set = new SetImpl();
    return set;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Tuple createTuple()
  {
    TupleImpl tuple = new TupleImpl();
    return tuple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parenthesis createParenthesis()
  {
    ParenthesisImpl parenthesis = new ParenthesisImpl();
    return parenthesis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RecordAccess createRecordAccess()
  {
    RecordAccessImpl recordAccess = new RecordAccessImpl();
    return recordAccess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetLangPackage getSetLangPackage()
  {
    return (SetLangPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SetLangPackage getPackage()
  {
    return SetLangPackage.eINSTANCE;
  }

} //SetLangFactoryImpl
