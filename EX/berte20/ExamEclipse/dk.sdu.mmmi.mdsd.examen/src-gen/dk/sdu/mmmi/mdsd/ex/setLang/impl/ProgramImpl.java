/**
 * generated by Xtext 2.33.0
 */
package dk.sdu.mmmi.mdsd.ex.setLang.impl;

import dk.sdu.mmmi.mdsd.ex.setLang.Compute;
import dk.sdu.mmmi.mdsd.ex.setLang.ExternalDef;
import dk.sdu.mmmi.mdsd.ex.setLang.Program;
import dk.sdu.mmmi.mdsd.ex.setLang.SetLangPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Program</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.sdu.mmmi.mdsd.ex.setLang.impl.ProgramImpl#getName <em>Name</em>}</li>
 *   <li>{@link dk.sdu.mmmi.mdsd.ex.setLang.impl.ProgramImpl#getExternalDefs <em>External Defs</em>}</li>
 *   <li>{@link dk.sdu.mmmi.mdsd.ex.setLang.impl.ProgramImpl#getRecords <em>Records</em>}</li>
 *   <li>{@link dk.sdu.mmmi.mdsd.ex.setLang.impl.ProgramImpl#getComputes <em>Computes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProgramImpl extends MinimalEObjectImpl.Container implements Program
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getExternalDefs() <em>External Defs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExternalDefs()
   * @generated
   * @ordered
   */
  protected EList<ExternalDef> externalDefs;

  /**
   * The cached value of the '{@link #getRecords() <em>Records</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecords()
   * @generated
   * @ordered
   */
  protected EList<dk.sdu.mmmi.mdsd.ex.setLang.Record> records;

  /**
   * The cached value of the '{@link #getComputes() <em>Computes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComputes()
   * @generated
   * @ordered
   */
  protected EList<Compute> computes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProgramImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SetLangPackage.Literals.PROGRAM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SetLangPackage.PROGRAM__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ExternalDef> getExternalDefs()
  {
    if (externalDefs == null)
    {
      externalDefs = new EObjectContainmentEList<ExternalDef>(ExternalDef.class, this, SetLangPackage.PROGRAM__EXTERNAL_DEFS);
    }
    return externalDefs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<dk.sdu.mmmi.mdsd.ex.setLang.Record> getRecords()
  {
    if (records == null)
    {
      records = new EObjectContainmentEList<dk.sdu.mmmi.mdsd.ex.setLang.Record>(dk.sdu.mmmi.mdsd.ex.setLang.Record.class, this, SetLangPackage.PROGRAM__RECORDS);
    }
    return records;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Compute> getComputes()
  {
    if (computes == null)
    {
      computes = new EObjectContainmentEList<Compute>(Compute.class, this, SetLangPackage.PROGRAM__COMPUTES);
    }
    return computes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SetLangPackage.PROGRAM__EXTERNAL_DEFS:
        return ((InternalEList<?>)getExternalDefs()).basicRemove(otherEnd, msgs);
      case SetLangPackage.PROGRAM__RECORDS:
        return ((InternalEList<?>)getRecords()).basicRemove(otherEnd, msgs);
      case SetLangPackage.PROGRAM__COMPUTES:
        return ((InternalEList<?>)getComputes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SetLangPackage.PROGRAM__NAME:
        return getName();
      case SetLangPackage.PROGRAM__EXTERNAL_DEFS:
        return getExternalDefs();
      case SetLangPackage.PROGRAM__RECORDS:
        return getRecords();
      case SetLangPackage.PROGRAM__COMPUTES:
        return getComputes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SetLangPackage.PROGRAM__NAME:
        setName((String)newValue);
        return;
      case SetLangPackage.PROGRAM__EXTERNAL_DEFS:
        getExternalDefs().clear();
        getExternalDefs().addAll((Collection<? extends ExternalDef>)newValue);
        return;
      case SetLangPackage.PROGRAM__RECORDS:
        getRecords().clear();
        getRecords().addAll((Collection<? extends dk.sdu.mmmi.mdsd.ex.setLang.Record>)newValue);
        return;
      case SetLangPackage.PROGRAM__COMPUTES:
        getComputes().clear();
        getComputes().addAll((Collection<? extends Compute>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SetLangPackage.PROGRAM__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SetLangPackage.PROGRAM__EXTERNAL_DEFS:
        getExternalDefs().clear();
        return;
      case SetLangPackage.PROGRAM__RECORDS:
        getRecords().clear();
        return;
      case SetLangPackage.PROGRAM__COMPUTES:
        getComputes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SetLangPackage.PROGRAM__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SetLangPackage.PROGRAM__EXTERNAL_DEFS:
        return externalDefs != null && !externalDefs.isEmpty();
      case SetLangPackage.PROGRAM__RECORDS:
        return records != null && !records.isEmpty();
      case SetLangPackage.PROGRAM__COMPUTES:
        return computes != null && !computes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ProgramImpl
