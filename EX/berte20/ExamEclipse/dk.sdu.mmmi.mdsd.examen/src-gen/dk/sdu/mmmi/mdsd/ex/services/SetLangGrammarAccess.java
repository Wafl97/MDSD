/*
 * generated by Xtext 2.33.0
 */
package dk.sdu.mmmi.mdsd.ex.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SetLangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExternalDefsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExternalDefsExternalDefParserRuleCall_2_0 = (RuleCall)cExternalDefsAssignment_2.eContents().get(0);
		private final Assignment cRecordsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRecordsRecordParserRuleCall_3_0 = (RuleCall)cRecordsAssignment_3.eContents().get(0);
		private final Assignment cComputesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComputesComputeParserRuleCall_4_0 = (RuleCall)cComputesAssignment_4.eContents().get(0);
		
		//Program:
		//    'program' name=ID
		//    externalDefs+=ExternalDef*
		//    records+=Record*
		//    computes+=Compute*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'program' name=ID
		//externalDefs+=ExternalDef*
		//records+=Record*
		//computes+=Compute*
		public Group getGroup() { return cGroup; }
		
		//'program'
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//externalDefs+=ExternalDef*
		public Assignment getExternalDefsAssignment_2() { return cExternalDefsAssignment_2; }
		
		//ExternalDef
		public RuleCall getExternalDefsExternalDefParserRuleCall_2_0() { return cExternalDefsExternalDefParserRuleCall_2_0; }
		
		//records+=Record*
		public Assignment getRecordsAssignment_3() { return cRecordsAssignment_3; }
		
		//Record
		public RuleCall getRecordsRecordParserRuleCall_3_0() { return cRecordsRecordParserRuleCall_3_0; }
		
		//computes+=Compute*
		public Assignment getComputesAssignment_4() { return cComputesAssignment_4; }
		
		//Compute
		public RuleCall getComputesComputeParserRuleCall_4_0() { return cComputesComputeParserRuleCall_4_0; }
	}
	public class ExternalDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.ExternalDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExternalDef:
		//    'external' name=ID '(' type=Type ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'external' name=ID '(' type=Type ')'
		public Group getGroup() { return cGroup; }
		
		//'external'
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class RecordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.Record");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cParentRecordCrossReference_2_1_0 = (CrossReference)cParentAssignment_2_1.eContents().get(0);
		private final RuleCall cParentRecordIDTerminalRuleCall_2_1_0_1 = (RuleCall)cParentRecordCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_2_1_0 = (RuleCall)cParametersAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMembersMemberParserRuleCall_5_0 = (RuleCall)cMembersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Record:
		//    'record' name=ID (':' parent=[Record])?
		//    ('(' parameters+=Parameter (',' parameters+=Parameter)*')')?
		//    '{' members+=Member* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'record' name=ID (':' parent=[Record])?
		//('(' parameters+=Parameter (',' parameters+=Parameter)*')')?
		//'{' members+=Member* '}'
		public Group getGroup() { return cGroup; }
		
		//'record'
		public Keyword getRecordKeyword_0() { return cRecordKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' parent=[Record])?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//parent=[Record]
		public Assignment getParentAssignment_2_1() { return cParentAssignment_2_1; }
		
		//[Record]
		public CrossReference getParentRecordCrossReference_2_1_0() { return cParentRecordCrossReference_2_1_0; }
		
		//ID
		public RuleCall getParentRecordIDTerminalRuleCall_2_1_0_1() { return cParentRecordIDTerminalRuleCall_2_1_0_1; }
		
		//('(' parameters+=Parameter (',' parameters+=Parameter)*')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_0() { return cParametersParameterParserRuleCall_3_1_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_2_1() { return cParametersAssignment_3_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_2_1_0() { return cParametersParameterParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//members+=Member*
		public Assignment getMembersAssignment_5() { return cMembersAssignment_5; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_5_0() { return cMembersMemberParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parameter:
		//    name=ID ':' type=Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTupleKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSetKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Type:
		//    'Int' |
		//    'Tuple' |
		//    'Set' '(' Type ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Int' |
		//'Tuple' |
		//'Set' '(' Type ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//'Tuple'
		public Keyword getTupleKeyword_1() { return cTupleKeyword_1; }
		
		//'Set' '(' Type ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'Set'
		public Keyword getSetKeyword_2_0() { return cSetKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2_2() { return cTypeParserRuleCall_2_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpUnionIntersectionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//Member:
		//    name=ID ':' exp=UnionIntersection
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' exp=UnionIntersection
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exp=UnionIntersection
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//UnionIntersection
		public RuleCall getExpUnionIntersectionParserRuleCall_2_0() { return cExpUnionIntersectionParserRuleCall_2_0; }
	}
	public class ComputeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.Compute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComputeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpUnionIntersectionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//Compute:
		//    'compute' exp=UnionIntersection
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'compute' exp=UnionIntersection
		public Group getGroup() { return cGroup; }
		
		//'compute'
		public Keyword getComputeKeyword_0() { return cComputeKeyword_0; }
		
		//exp=UnionIntersection
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//UnionIntersection
		public RuleCall getExpUnionIntersectionParserRuleCall_1_0() { return cExpUnionIntersectionParserRuleCall_1_0; }
	}
	public class UnionIntersectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.UnionIntersection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cProductParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cUnionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cUKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cIntersectionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightProductParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//UnionIntersection returns Expression:
		//    Product ((
		//        {Union.left=current} 'U' |
		//        {Intersection.left=current} '&'
		//    ) right=Product)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Product ((
		//    {Union.left=current} 'U' |
		//    {Intersection.left=current} '&'
		//) right=Product)*
		public Group getGroup() { return cGroup; }
		
		//Product
		public RuleCall getProductParserRuleCall_0() { return cProductParserRuleCall_0; }
		
		//((
		//       {Union.left=current} 'U' |
		//       {Intersection.left=current} '&'
		//   ) right=Product)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(
		//        {Union.left=current} 'U' |
		//        {Intersection.left=current} '&'
		//    )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Union.left=current} 'U'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Union.left=current}
		public Action getUnionLeftAction_1_0_0_0() { return cUnionLeftAction_1_0_0_0; }
		
		//'U'
		public Keyword getUKeyword_1_0_0_1() { return cUKeyword_1_0_0_1; }
		
		//{Intersection.left=current} '&'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Intersection.left=current}
		public Action getIntersectionLeftAction_1_0_1_0() { return cIntersectionLeftAction_1_0_1_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_0_1_1() { return cAmpersandKeyword_1_0_1_1; }
		
		//right=Product
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Product
		public RuleCall getRightProductParserRuleCall_1_1_0() { return cRightProductParserRuleCall_1_1_0; }
	}
	public class ProductElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.Product");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cProjectionFilterParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cProductLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightProjectionFilterParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Product returns Expression:
		//    ProjectionFilter (({Product.left=current} '*') right=ProjectionFilter)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ProjectionFilter (({Product.left=current} '*') right=ProjectionFilter)*
		public Group getGroup() { return cGroup; }
		
		//ProjectionFilter
		public RuleCall getProjectionFilterParserRuleCall_0() { return cProjectionFilterParserRuleCall_0; }
		
		//(({Product.left=current} '*') right=ProjectionFilter)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Product.left=current} '*')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Product.left=current}
		public Action getProductLeftAction_1_0_0() { return cProductLeftAction_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }
		
		//right=ProjectionFilter
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//ProjectionFilter
		public RuleCall getRightProjectionFilterParserRuleCall_1_1_0() { return cRightProjectionFilterParserRuleCall_1_1_0; }
	}
	public class ProjectionFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.ProjectionFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimitiveParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Action cProjectionOpAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Assignment cIndicesAssignment_1_1_0_2 = (Assignment)cGroup_1_1_0.eContents().get(2);
		private final RuleCall cIndicesINTTerminalRuleCall_1_1_0_2_0 = (RuleCall)cIndicesAssignment_1_1_0_2.eContents().get(0);
		private final Group cGroup_1_1_0_3 = (Group)cGroup_1_1_0.eContents().get(3);
		private final Keyword cCommaKeyword_1_1_0_3_0 = (Keyword)cGroup_1_1_0_3.eContents().get(0);
		private final Assignment cIndicesAssignment_1_1_0_3_1 = (Assignment)cGroup_1_1_0_3.eContents().get(1);
		private final RuleCall cIndicesINTTerminalRuleCall_1_1_0_3_1_0 = (RuleCall)cIndicesAssignment_1_1_0_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1_0_4 = (Keyword)cGroup_1_1_0.eContents().get(4);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Action cFilterOpAction_1_1_1_0 = (Action)cGroup_1_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Assignment cExternalAssignment_1_1_1_2 = (Assignment)cGroup_1_1_1.eContents().get(2);
		private final CrossReference cExternalExternalDefCrossReference_1_1_1_2_0 = (CrossReference)cExternalAssignment_1_1_1_2.eContents().get(0);
		private final RuleCall cExternalExternalDefIDTerminalRuleCall_1_1_1_2_0_1 = (RuleCall)cExternalExternalDefCrossReference_1_1_1_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_1_1_3 = (Keyword)cGroup_1_1_1.eContents().get(3);
		
		//ProjectionFilter returns Expression:
		//    Primitive ('#'
		//        (({Projection.op=current} '<' indices+=INT (',' indices+=INT)* '>')  |
		//        ({Filter.op=current}'[' external=[ExternalDef] ']'))
		//        )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primitive ('#'
		//    (({Projection.op=current} '<' indices+=INT (',' indices+=INT)* '>')  |
		//    ({Filter.op=current}'[' external=[ExternalDef] ']'))
		//    )?
		public Group getGroup() { return cGroup; }
		
		//Primitive
		public RuleCall getPrimitiveParserRuleCall_0() { return cPrimitiveParserRuleCall_0; }
		
		//('#'
		//       (({Projection.op=current} '<' indices+=INT (',' indices+=INT)* '>')  |
		//       ({Filter.op=current}'[' external=[ExternalDef] ']'))
		//       )?
		public Group getGroup_1() { return cGroup_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }
		
		//(({Projection.op=current} '<' indices+=INT (',' indices+=INT)* '>')  |
		//({Filter.op=current}'[' external=[ExternalDef] ']'))
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//({Projection.op=current} '<' indices+=INT (',' indices+=INT)* '>')
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//{Projection.op=current}
		public Action getProjectionOpAction_1_1_0_0() { return cProjectionOpAction_1_1_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1_0_1() { return cLessThanSignKeyword_1_1_0_1; }
		
		//indices+=INT
		public Assignment getIndicesAssignment_1_1_0_2() { return cIndicesAssignment_1_1_0_2; }
		
		//INT
		public RuleCall getIndicesINTTerminalRuleCall_1_1_0_2_0() { return cIndicesINTTerminalRuleCall_1_1_0_2_0; }
		
		//(',' indices+=INT)*
		public Group getGroup_1_1_0_3() { return cGroup_1_1_0_3; }
		
		//','
		public Keyword getCommaKeyword_1_1_0_3_0() { return cCommaKeyword_1_1_0_3_0; }
		
		//indices+=INT
		public Assignment getIndicesAssignment_1_1_0_3_1() { return cIndicesAssignment_1_1_0_3_1; }
		
		//INT
		public RuleCall getIndicesINTTerminalRuleCall_1_1_0_3_1_0() { return cIndicesINTTerminalRuleCall_1_1_0_3_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_1_0_4() { return cGreaterThanSignKeyword_1_1_0_4; }
		
		//({Filter.op=current}'[' external=[ExternalDef] ']')
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//{Filter.op=current}
		public Action getFilterOpAction_1_1_1_0() { return cFilterOpAction_1_1_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_1_1() { return cLeftSquareBracketKeyword_1_1_1_1; }
		
		//external=[ExternalDef]
		public Assignment getExternalAssignment_1_1_1_2() { return cExternalAssignment_1_1_1_2; }
		
		//[ExternalDef]
		public CrossReference getExternalExternalDefCrossReference_1_1_1_2_0() { return cExternalExternalDefCrossReference_1_1_1_2_0; }
		
		//ID
		public RuleCall getExternalExternalDefIDTerminalRuleCall_1_1_1_2_0_1() { return cExternalExternalDefIDTerminalRuleCall_1_1_1_2_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_1_3() { return cRightSquareBracketKeyword_1_1_1_3; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.Binding");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Binding:
		//    Member | Parameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Member | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Member
		public RuleCall getMemberParserRuleCall_0() { return cMemberParserRuleCall_0; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
	}
	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTupleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRecordAccessParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRefParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParenthesisParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Primitive returns Expression:
		//    IntValue |
		//     Set |
		//     Tuple |
		//     RecordAccess |
		//     Ref |
		//     Parenthesis
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue |
		// Set |
		// Tuple |
		// RecordAccess |
		// Ref |
		// Parenthesis
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//Set
		public RuleCall getSetParserRuleCall_1() { return cSetParserRuleCall_1; }
		
		//Tuple
		public RuleCall getTupleParserRuleCall_2() { return cTupleParserRuleCall_2; }
		
		//RecordAccess
		public RuleCall getRecordAccessParserRuleCall_3() { return cRecordAccessParserRuleCall_3; }
		
		//Ref
		public RuleCall getRefParserRuleCall_4() { return cRefParserRuleCall_4; }
		
		//Parenthesis
		public RuleCall getParenthesisParserRuleCall_5() { return cParenthesisParserRuleCall_5; }
	}
	public class RefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.Ref");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefBindingCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefBindingIDTerminalRuleCall_0_1 = (RuleCall)cRefBindingCrossReference_0.eContents().get(1);
		
		//Ref:
		//    ref=[Binding]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Binding]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[Binding]
		public CrossReference getRefBindingCrossReference_0() { return cRefBindingCrossReference_0; }
		
		//ID
		public RuleCall getRefBindingIDTerminalRuleCall_0_1() { return cRefBindingIDTerminalRuleCall_0_1; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.IntValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntValue returns Expression:
		//    {IntValue} value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntValue} value=INT
		public Group getGroup() { return cGroup; }
		
		//{IntValue}
		public Action getIntValueAction_0() { return cIntValueAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValuesUnionIntersectionParserRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesUnionIntersectionParserRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Set returns Expression:
		//    {Set} '{' (values+=UnionIntersection (',' values+=UnionIntersection)*)?  '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Set} '{' (values+=UnionIntersection (',' values+=UnionIntersection)*)?  '}'
		public Group getGroup() { return cGroup; }
		
		//{Set}
		public Action getSetAction_0() { return cSetAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(values+=UnionIntersection (',' values+=UnionIntersection)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//values+=UnionIntersection
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }
		
		//UnionIntersection
		public RuleCall getValuesUnionIntersectionParserRuleCall_2_0_0() { return cValuesUnionIntersectionParserRuleCall_2_0_0; }
		
		//(',' values+=UnionIntersection)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//values+=UnionIntersection
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }
		
		//UnionIntersection
		public RuleCall getValuesUnionIntersectionParserRuleCall_2_1_1_0() { return cValuesUnionIntersectionParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class TupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.Tuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTupleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesUnionIntersectionParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesUnionIntersectionParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Tuple returns Expression:
		//    {Tuple} '[' values+=UnionIntersection (',' values+=UnionIntersection*)* ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Tuple} '[' values+=UnionIntersection (',' values+=UnionIntersection*)* ']'
		public Group getGroup() { return cGroup; }
		
		//{Tuple}
		public Action getTupleAction_0() { return cTupleAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//values+=UnionIntersection
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//UnionIntersection
		public RuleCall getValuesUnionIntersectionParserRuleCall_2_0() { return cValuesUnionIntersectionParserRuleCall_2_0; }
		
		//(',' values+=UnionIntersection*)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//values+=UnionIntersection*
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }
		
		//UnionIntersection
		public RuleCall getValuesUnionIntersectionParserRuleCall_3_1_0() { return cValuesUnionIntersectionParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.Parenthesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParenthesisAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpUnionIntersectionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parenthesis returns Expression:
		//    {Parenthesis} '(' exp=UnionIntersection ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parenthesis} '(' exp=UnionIntersection ')'
		public Group getGroup() { return cGroup; }
		
		//{Parenthesis}
		public Action getParenthesisAction_0() { return cParenthesisAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp=UnionIntersection
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//UnionIntersection
		public RuleCall getExpUnionIntersectionParserRuleCall_2_0() { return cExpUnionIntersectionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RecordAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ex.SetLang.RecordAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRecordAccessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRecordAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRecordRecordCrossReference_2_0 = (CrossReference)cRecordAssignment_2.eContents().get(0);
		private final RuleCall cRecordRecordIDTerminalRuleCall_2_0_1 = (RuleCall)cRecordRecordCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersUnionIntersectionParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParametersUnionIntersectionParserRuleCall_3_2_1_0 = (RuleCall)cParametersAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMemberAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cMemberMemberCrossReference_5_0 = (CrossReference)cMemberAssignment_5.eContents().get(0);
		private final RuleCall cMemberMemberIDTerminalRuleCall_5_0_1 = (RuleCall)cMemberMemberCrossReference_5_0.eContents().get(1);
		
		//RecordAccess returns Expression:
		//    {RecordAccess} '!' record=[Record] ('(' parameters+=UnionIntersection (',' parameters+=UnionIntersection)* ')')? '->' member=[Member]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RecordAccess} '!' record=[Record] ('(' parameters+=UnionIntersection (',' parameters+=UnionIntersection)* ')')? '->' member=[Member]
		public Group getGroup() { return cGroup; }
		
		//{RecordAccess}
		public Action getRecordAccessAction_0() { return cRecordAccessAction_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
		
		//record=[Record]
		public Assignment getRecordAssignment_2() { return cRecordAssignment_2; }
		
		//[Record]
		public CrossReference getRecordRecordCrossReference_2_0() { return cRecordRecordCrossReference_2_0; }
		
		//ID
		public RuleCall getRecordRecordIDTerminalRuleCall_2_0_1() { return cRecordRecordIDTerminalRuleCall_2_0_1; }
		
		//('(' parameters+=UnionIntersection (',' parameters+=UnionIntersection)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//parameters+=UnionIntersection
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }
		
		//UnionIntersection
		public RuleCall getParametersUnionIntersectionParserRuleCall_3_1_0() { return cParametersUnionIntersectionParserRuleCall_3_1_0; }
		
		//(',' parameters+=UnionIntersection)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//parameters+=UnionIntersection
		public Assignment getParametersAssignment_3_2_1() { return cParametersAssignment_3_2_1; }
		
		//UnionIntersection
		public RuleCall getParametersUnionIntersectionParserRuleCall_3_2_1_0() { return cParametersUnionIntersectionParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//member=[Member]
		public Assignment getMemberAssignment_5() { return cMemberAssignment_5; }
		
		//[Member]
		public CrossReference getMemberMemberCrossReference_5_0() { return cMemberMemberCrossReference_5_0; }
		
		//ID
		public RuleCall getMemberMemberIDTerminalRuleCall_5_0_1() { return cMemberMemberIDTerminalRuleCall_5_0_1; }
	}
	
	
	private final ProgramElements pProgram;
	private final ExternalDefElements pExternalDef;
	private final RecordElements pRecord;
	private final ParameterElements pParameter;
	private final TypeElements pType;
	private final MemberElements pMember;
	private final ComputeElements pCompute;
	private final UnionIntersectionElements pUnionIntersection;
	private final ProductElements pProduct;
	private final ProjectionFilterElements pProjectionFilter;
	private final BindingElements pBinding;
	private final PrimitiveElements pPrimitive;
	private final RefElements pRef;
	private final IntValueElements pIntValue;
	private final SetElements pSet;
	private final TupleElements pTuple;
	private final ParenthesisElements pParenthesis;
	private final RecordAccessElements pRecordAccess;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SetLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pExternalDef = new ExternalDefElements();
		this.pRecord = new RecordElements();
		this.pParameter = new ParameterElements();
		this.pType = new TypeElements();
		this.pMember = new MemberElements();
		this.pCompute = new ComputeElements();
		this.pUnionIntersection = new UnionIntersectionElements();
		this.pProduct = new ProductElements();
		this.pProjectionFilter = new ProjectionFilterElements();
		this.pBinding = new BindingElements();
		this.pPrimitive = new PrimitiveElements();
		this.pRef = new RefElements();
		this.pIntValue = new IntValueElements();
		this.pSet = new SetElements();
		this.pTuple = new TupleElements();
		this.pParenthesis = new ParenthesisElements();
		this.pRecordAccess = new RecordAccessElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mmmi.mdsd.ex.SetLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//    'program' name=ID
	//    externalDefs+=ExternalDef*
	//    records+=Record*
	//    computes+=Compute*
	//;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//ExternalDef:
	//    'external' name=ID '(' type=Type ')'
	//;
	public ExternalDefElements getExternalDefAccess() {
		return pExternalDef;
	}
	
	public ParserRule getExternalDefRule() {
		return getExternalDefAccess().getRule();
	}
	
	//Record:
	//    'record' name=ID (':' parent=[Record])?
	//    ('(' parameters+=Parameter (',' parameters+=Parameter)*')')?
	//    '{' members+=Member* '}'
	//;
	public RecordElements getRecordAccess() {
		return pRecord;
	}
	
	public ParserRule getRecordRule() {
		return getRecordAccess().getRule();
	}
	
	//Parameter:
	//    name=ID ':' type=Type
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Type:
	//    'Int' |
	//    'Tuple' |
	//    'Set' '(' Type ')'
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Member:
	//    name=ID ':' exp=UnionIntersection
	//;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//Compute:
	//    'compute' exp=UnionIntersection
	//;
	public ComputeElements getComputeAccess() {
		return pCompute;
	}
	
	public ParserRule getComputeRule() {
		return getComputeAccess().getRule();
	}
	
	//UnionIntersection returns Expression:
	//    Product ((
	//        {Union.left=current} 'U' |
	//        {Intersection.left=current} '&'
	//    ) right=Product)*
	//;
	public UnionIntersectionElements getUnionIntersectionAccess() {
		return pUnionIntersection;
	}
	
	public ParserRule getUnionIntersectionRule() {
		return getUnionIntersectionAccess().getRule();
	}
	
	//Product returns Expression:
	//    ProjectionFilter (({Product.left=current} '*') right=ProjectionFilter)*
	//;
	public ProductElements getProductAccess() {
		return pProduct;
	}
	
	public ParserRule getProductRule() {
		return getProductAccess().getRule();
	}
	
	//ProjectionFilter returns Expression:
	//    Primitive ('#'
	//        (({Projection.op=current} '<' indices+=INT (',' indices+=INT)* '>')  |
	//        ({Filter.op=current}'[' external=[ExternalDef] ']'))
	//        )?
	//;
	public ProjectionFilterElements getProjectionFilterAccess() {
		return pProjectionFilter;
	}
	
	public ParserRule getProjectionFilterRule() {
		return getProjectionFilterAccess().getRule();
	}
	
	//Binding:
	//    Member | Parameter
	//;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//Primitive returns Expression:
	//    IntValue |
	//     Set |
	//     Tuple |
	//     RecordAccess |
	//     Ref |
	//     Parenthesis
	//;
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}
	
	//Ref:
	//    ref=[Binding]
	//;
	public RefElements getRefAccess() {
		return pRef;
	}
	
	public ParserRule getRefRule() {
		return getRefAccess().getRule();
	}
	
	//IntValue returns Expression:
	//    {IntValue} value=INT
	//;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//Set returns Expression:
	//    {Set} '{' (values+=UnionIntersection (',' values+=UnionIntersection)*)?  '}'
	//;
	public SetElements getSetAccess() {
		return pSet;
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}
	
	//Tuple returns Expression:
	//    {Tuple} '[' values+=UnionIntersection (',' values+=UnionIntersection*)* ']'
	//;
	public TupleElements getTupleAccess() {
		return pTuple;
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}
	
	//Parenthesis returns Expression:
	//    {Parenthesis} '(' exp=UnionIntersection ')'
	//;
	public ParenthesisElements getParenthesisAccess() {
		return pParenthesis;
	}
	
	public ParserRule getParenthesisRule() {
		return getParenthesisAccess().getRule();
	}
	
	//RecordAccess returns Expression:
	//    {RecordAccess} '!' record=[Record] ('(' parameters+=UnionIntersection (',' parameters+=UnionIntersection)* ')')? '->' member=[Member]
	//;
	public RecordAccessElements getRecordAccessAccess() {
		return pRecordAccess;
	}
	
	public ParserRule getRecordAccessRule() {
		return getRecordAccessAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
