/*
 * generated by Xtext 2.33.0
 */
package dk.sdu.mmmi.mdsd.ex.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import dk.sdu.mmmi.mdsd.ex.ide.contentassist.antlr.internal.InternalSetLangParser;
import dk.sdu.mmmi.mdsd.ex.services.SetLangGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SetLangParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SetLangGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SetLangGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getUnionIntersectionAccess().getAlternatives_1_0(), "rule__UnionIntersection__Alternatives_1_0");
			builder.put(grammarAccess.getProjectionFilterAccess().getAlternatives_1_1(), "rule__ProjectionFilter__Alternatives_1_1");
			builder.put(grammarAccess.getBindingAccess().getAlternatives(), "rule__Binding__Alternatives");
			builder.put(grammarAccess.getPrimitiveAccess().getAlternatives(), "rule__Primitive__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getExternalDefAccess().getGroup(), "rule__ExternalDef__Group__0");
			builder.put(grammarAccess.getRecordAccess().getGroup(), "rule__Record__Group__0");
			builder.put(grammarAccess.getRecordAccess().getGroup_2(), "rule__Record__Group_2__0");
			builder.put(grammarAccess.getRecordAccess().getGroup_3(), "rule__Record__Group_3__0");
			builder.put(grammarAccess.getRecordAccess().getGroup_3_2(), "rule__Record__Group_3_2__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_2(), "rule__Type__Group_2__0");
			builder.put(grammarAccess.getMemberAccess().getGroup(), "rule__Member__Group__0");
			builder.put(grammarAccess.getComputeAccess().getGroup(), "rule__Compute__Group__0");
			builder.put(grammarAccess.getUnionIntersectionAccess().getGroup(), "rule__UnionIntersection__Group__0");
			builder.put(grammarAccess.getUnionIntersectionAccess().getGroup_1(), "rule__UnionIntersection__Group_1__0");
			builder.put(grammarAccess.getUnionIntersectionAccess().getGroup_1_0_0(), "rule__UnionIntersection__Group_1_0_0__0");
			builder.put(grammarAccess.getUnionIntersectionAccess().getGroup_1_0_1(), "rule__UnionIntersection__Group_1_0_1__0");
			builder.put(grammarAccess.getProductAccess().getGroup(), "rule__Product__Group__0");
			builder.put(grammarAccess.getProductAccess().getGroup_1(), "rule__Product__Group_1__0");
			builder.put(grammarAccess.getProductAccess().getGroup_1_0(), "rule__Product__Group_1_0__0");
			builder.put(grammarAccess.getProjectionFilterAccess().getGroup(), "rule__ProjectionFilter__Group__0");
			builder.put(grammarAccess.getProjectionFilterAccess().getGroup_1(), "rule__ProjectionFilter__Group_1__0");
			builder.put(grammarAccess.getProjectionFilterAccess().getGroup_1_1_0(), "rule__ProjectionFilter__Group_1_1_0__0");
			builder.put(grammarAccess.getProjectionFilterAccess().getGroup_1_1_0_3(), "rule__ProjectionFilter__Group_1_1_0_3__0");
			builder.put(grammarAccess.getProjectionFilterAccess().getGroup_1_1_1(), "rule__ProjectionFilter__Group_1_1_1__0");
			builder.put(grammarAccess.getIntValueAccess().getGroup(), "rule__IntValue__Group__0");
			builder.put(grammarAccess.getSetAccess().getGroup(), "rule__Set__Group__0");
			builder.put(grammarAccess.getSetAccess().getGroup_2(), "rule__Set__Group_2__0");
			builder.put(grammarAccess.getSetAccess().getGroup_2_1(), "rule__Set__Group_2_1__0");
			builder.put(grammarAccess.getTupleAccess().getGroup(), "rule__Tuple__Group__0");
			builder.put(grammarAccess.getTupleAccess().getGroup_3(), "rule__Tuple__Group_3__0");
			builder.put(grammarAccess.getParenthesisAccess().getGroup(), "rule__Parenthesis__Group__0");
			builder.put(grammarAccess.getRecordAccessAccess().getGroup(), "rule__RecordAccess__Group__0");
			builder.put(grammarAccess.getRecordAccessAccess().getGroup_3(), "rule__RecordAccess__Group_3__0");
			builder.put(grammarAccess.getRecordAccessAccess().getGroup_3_2(), "rule__RecordAccess__Group_3_2__0");
			builder.put(grammarAccess.getProgramAccess().getNameAssignment_1(), "rule__Program__NameAssignment_1");
			builder.put(grammarAccess.getProgramAccess().getExternalDefsAssignment_2(), "rule__Program__ExternalDefsAssignment_2");
			builder.put(grammarAccess.getProgramAccess().getRecordsAssignment_3(), "rule__Program__RecordsAssignment_3");
			builder.put(grammarAccess.getProgramAccess().getComputesAssignment_4(), "rule__Program__ComputesAssignment_4");
			builder.put(grammarAccess.getExternalDefAccess().getNameAssignment_1(), "rule__ExternalDef__NameAssignment_1");
			builder.put(grammarAccess.getExternalDefAccess().getTypeAssignment_3(), "rule__ExternalDef__TypeAssignment_3");
			builder.put(grammarAccess.getRecordAccess().getNameAssignment_1(), "rule__Record__NameAssignment_1");
			builder.put(grammarAccess.getRecordAccess().getParentAssignment_2_1(), "rule__Record__ParentAssignment_2_1");
			builder.put(grammarAccess.getRecordAccess().getParametersAssignment_3_1(), "rule__Record__ParametersAssignment_3_1");
			builder.put(grammarAccess.getRecordAccess().getParametersAssignment_3_2_1(), "rule__Record__ParametersAssignment_3_2_1");
			builder.put(grammarAccess.getRecordAccess().getMembersAssignment_5(), "rule__Record__MembersAssignment_5");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_2(), "rule__Parameter__TypeAssignment_2");
			builder.put(grammarAccess.getMemberAccess().getNameAssignment_0(), "rule__Member__NameAssignment_0");
			builder.put(grammarAccess.getMemberAccess().getExpAssignment_2(), "rule__Member__ExpAssignment_2");
			builder.put(grammarAccess.getComputeAccess().getExpAssignment_1(), "rule__Compute__ExpAssignment_1");
			builder.put(grammarAccess.getUnionIntersectionAccess().getRightAssignment_1_1(), "rule__UnionIntersection__RightAssignment_1_1");
			builder.put(grammarAccess.getProductAccess().getRightAssignment_1_1(), "rule__Product__RightAssignment_1_1");
			builder.put(grammarAccess.getProjectionFilterAccess().getIndicesAssignment_1_1_0_2(), "rule__ProjectionFilter__IndicesAssignment_1_1_0_2");
			builder.put(grammarAccess.getProjectionFilterAccess().getIndicesAssignment_1_1_0_3_1(), "rule__ProjectionFilter__IndicesAssignment_1_1_0_3_1");
			builder.put(grammarAccess.getProjectionFilterAccess().getExternalAssignment_1_1_1_2(), "rule__ProjectionFilter__ExternalAssignment_1_1_1_2");
			builder.put(grammarAccess.getRefAccess().getRefAssignment(), "rule__Ref__RefAssignment");
			builder.put(grammarAccess.getIntValueAccess().getValueAssignment_1(), "rule__IntValue__ValueAssignment_1");
			builder.put(grammarAccess.getSetAccess().getValuesAssignment_2_0(), "rule__Set__ValuesAssignment_2_0");
			builder.put(grammarAccess.getSetAccess().getValuesAssignment_2_1_1(), "rule__Set__ValuesAssignment_2_1_1");
			builder.put(grammarAccess.getTupleAccess().getValuesAssignment_2(), "rule__Tuple__ValuesAssignment_2");
			builder.put(grammarAccess.getTupleAccess().getValuesAssignment_3_1(), "rule__Tuple__ValuesAssignment_3_1");
			builder.put(grammarAccess.getParenthesisAccess().getExpAssignment_2(), "rule__Parenthesis__ExpAssignment_2");
			builder.put(grammarAccess.getRecordAccessAccess().getRecordAssignment_2(), "rule__RecordAccess__RecordAssignment_2");
			builder.put(grammarAccess.getRecordAccessAccess().getParametersAssignment_3_1(), "rule__RecordAccess__ParametersAssignment_3_1");
			builder.put(grammarAccess.getRecordAccessAccess().getParametersAssignment_3_2_1(), "rule__RecordAccess__ParametersAssignment_3_2_1");
			builder.put(grammarAccess.getRecordAccessAccess().getMemberAssignment_5(), "rule__RecordAccess__MemberAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SetLangGrammarAccess grammarAccess;

	@Override
	protected InternalSetLangParser createParser() {
		InternalSetLangParser result = new InternalSetLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SetLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SetLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
